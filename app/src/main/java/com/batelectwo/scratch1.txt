Button bilLHistoryButton = findViewById(R.id.billHistory);
        bilLHistoryButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // Inflate the alert dialog layout
                View dialogViewBillHistory = LayoutInflater.from(BillActivity.this).inflate(R.layout.bill_history_alert, null);

                // Find the chart view
                ColumnChartView billHistoryGraph = dialogViewBillHistory.findViewById(R.id.barGraph);

                // Prepare data for the chart
                List<Column> columns = new ArrayList<>();
                List<AxisValue> axisValues = new ArrayList<>();

                // Retrieve data from your "BillHistory" node (replace "user1" with the actual user ID)
                FirebaseAuth auth = FirebaseAuth.getInstance();
                FirebaseUser firebaseUser = auth.getCurrentUser();

                String userId = firebaseUser.getUid();
                DatabaseReference billHistoryRef = FirebaseDatabase.getInstance().getReference("BillHistory").child(userId);

                billHistoryRef.addListenerForSingleValueEvent(new ValueEventListener() {
                    @Override
                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                        if (dataSnapshot.exists()) {
                            for (DataSnapshot monthSnapshot : dataSnapshot.getChildren()) {
                                String monthYear = monthSnapshot.getKey(); // Assuming the key is the monthYear format

                                // Check if "bill" exists under each month
                                if (monthSnapshot.hasChild("bill")) {
                                    String billAmountStr = monthSnapshot.child("bill").getValue(String.class);

                                    // Check if the "bill" value is not null and not empty before further processing
                                    if (billAmountStr != null && !billAmountStr.isEmpty()) {
                                        // Convert the billAmountStr to a Float if needed
                                        Float billAmount = Float.valueOf(billAmountStr);

                                        List<SubcolumnValue> values = new ArrayList<>();

                                        // Set color based on value
                                        if (billAmount <= 500) {
                                            values.add(new SubcolumnValue(billAmount, Color.BLUE));
                                        } else if (billAmount >= 501) {
                                            values.add(new SubcolumnValue(billAmount, Color.RED));
                                        }

                                        Column column = new Column(values);
                                        columns.add(column);

                                        // Add a single axis value for each month
                                        axisValues.add(new AxisValue(axisValues.size()).setLabel(monthYear));
                                    } else {
                                        // Handle the case where "bill" is null or empty, if needed
                                        Log.e("BillActivity", "Bill amount is null or empty for month: " + monthYear);
                                    }
                                }
                            }

                            // Create the data object and set it to the chart
                            ColumnChartData data = new ColumnChartData(columns);

                            // Customize the X-axis labels
                            Axis axisX = new Axis();
                            axisX.setValues(axisValues);
                            data.setAxisXBottom(axisX);

                            // Customize the Y-axis labels
                            Axis axisY = new Axis().setHasLines(true);

                            // Set custom values for Y-axis labels
                            List<AxisValue> yValues = new ArrayList<>();
                            yValues.add(new AxisValue(0).setLabel("0"));
                            yValues.add(new AxisValue(200).setLabel("200"));
                            yValues.add(new AxisValue(400).setLabel("400"));
                            yValues.add(new AxisValue(600).setLabel("600"));
                            yValues.add(new AxisValue(800).setLabel("800"));
                            yValues.add(new AxisValue(1000).setLabel("1000"));

                            axisY.setValues(yValues);
                            data.setAxisYLeft(axisY);

                            // Customize data values inside columns
                            for (Column column : data.getColumns()) {
                                column.setHasLabels(true);
                            }

                            billHistoryGraph.setColumnChartData(data);

                            // Create the alert dialog
                            AlertDialog.Builder builder = new AlertDialog.Builder(BillActivity.this);
                            builder.setView(dialogViewBillHistory);

                            // Create and show the dialog
                            final AlertDialog alertDialog = builder.create();
                            alertDialog.show();
                        }
                    }

                    @Override
                    public void onCancelled(@NonNull DatabaseError databaseError) {
                        // Handle database error
                    }
                });
            }
        });